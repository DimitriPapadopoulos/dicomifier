#!${PYTHON_EXECUTABLE}

import argparse
import logging
import pathlib
import sys
import tempfile
import shutil
import zipfile

import odil

import dicomifier

def main():
    print(
      "WARNING: bruker2dicom is deprecated. "
      "Use 'dicomifier to-dicom' instead.")
    
    parser = argparse.ArgumentParser(
        description="Convert Bruker images to DICOM")
    subparsers = parser.add_subparsers(help="Sub-commands help")

    list_parser = subparsers.add_parser(
        "list", help="List series and reconstructions in a Bruker directory")
    list_parser.add_argument(
        "sources", type=pathlib.Path, nargs="+",
        metavar="source", help="Directory containing the Bruker data")
    list_parser.add_argument(
        "--verbosity", "-v",
        choices=["warning", "info", "debug"], default="warning")
    list_parser.set_defaults(function=list_)

    convert_parser = subparsers.add_parser(
        "convert", help="Convert Bruker images")
    convert_parser.add_argument(
        "sources", type=pathlib.Path, nargs="+", 
        metavar="source", 
        help="Directories or PvDataset archives containing the Bruker data")
    convert_parser.add_argument(
        "destination", type=pathlib.Path, help="Output directory")
    convert_parser.add_argument(
        "--transfer-syntax", "-t", type=lambda x: getattr(odil.registry, x),
        default="ImplicitVRLittleEndian",
        help="Transfer syntax of the output files")
    convert_parser.add_argument(
        "--multiframe", "-m", action="store_true",
        help="Generate multiframe dicom files")
    convert_parser.add_argument(
        "--layout", "-l", choices=["nested", "flat"], default="nested",
        help="Layout of the DICOM files on the disk")
    convert_parser.add_argument(
        "--dicomdir", "-d", action="store_true", help="Create a DICOMDIR")
    convert_parser.add_argument(
        "--verbosity", "-v",
        choices=["warning", "info", "debug"], default="warning")
    convert_parser.set_defaults(function=convert)

    arguments = vars(parser.parse_args())
    
    if "function" not in arguments:
        parser.error("too few arguments")

    verbosity = arguments.pop("verbosity")
    logging.basicConfig(
        level=verbosity.upper(), 
        format="%(levelname)s - %(name)s: %(message)s")

    function = arguments.pop("function")
    try:
      function(**arguments)
    except Exception as e:
        if verbosity == "debug":
            raise
        else:
            parser.error(e)

def list_(sources):
    return dicomifier.commands.list.action(sources, False)

def convert(sources, destination, transfer_syntax, layout, dicomdir, multiframe):
    layout = dicomifier.commands.to_dicom.writer_from_name(layout)
    return dicomifier.commands.to_dicom.action(
        sources, destination, transfer_syntax, layout, dicomdir, multiframe)

if __name__ == "__main__": 
    sys.exit(main())
