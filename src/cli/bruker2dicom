#!${PYTHON_EXECUTABLE}

import argparse
import logging
import pathlib
import sys
import tempfile
import shutil
import zipfile

import odil

import dicomifier

def main():
    parser = argparse.ArgumentParser(
        description="Convert Bruker images to DICOM")
    subparsers = parser.add_subparsers(help="Sub-commands help")

    list_parser = subparsers.add_parser(
        "list", help="List series and reconstructions in a Bruker directory")
    list_parser.add_argument(
        "sources", type=pathlib.Path, nargs="+",
        metavar="source", help="Directory containing the Bruker data")
    list_parser.add_argument(
        "--verbosity", "-v",
        choices=["warning", "info", "debug"], default="warning")
    list_parser.set_defaults(function=list_)

    convert_parser = subparsers.add_parser(
        "convert", help="Convert Bruker images")
    convert_parser.add_argument(
        "sources", type=pathlib.Path, nargs="+", 
        metavar="source", 
        help="Directories or PvDataset archives containing the Bruker data")
    convert_parser.add_argument(
        "destination", type=pathlib.Path, help="Output directory")
    convert_parser.add_argument(
        "--transfer-syntax", "-t", type=lambda x: getattr(odil.registry, x),
        default="ImplicitVRLittleEndian",
        help="Transfer syntax of the output files")
    convert_parser.add_argument(
        "--multiframe", "-m", action="store_true",
        help="Generate multiframe dicom files")
    convert_parser.add_argument(
        "--layout", "-l", choices=["nested", "flat"], default="nested",
        help="Layout of the DICOM files on the disk")
    convert_parser.add_argument(
        "--dicomdir", "-d", action="store_true", help="Create a DICOMDIR")
    convert_parser.add_argument(
        "--verbosity", "-v",
        choices=["warning", "info", "debug"], default="warning")
    convert_parser.set_defaults(function=convert)

    arguments = vars(parser.parse_args())
    
    if "function" not in arguments:
        parser.error("too few arguments")

    verbosity = arguments.pop("verbosity")
    logging.basicConfig(
        level=verbosity.upper(), 
        format="%(levelname)s - %(name)s: %(message)s")

    function = arguments.pop("function")

    # Unzip pvdataset archives as needed
    directory = pathlib.Path(tempfile.mkdtemp())
    try:
        for index, source in enumerate(arguments["sources"]):
            if zipfile.is_zipfile(source):
                with zipfile.ZipFile(source) as archive:
                    archive.extractall(directory/source.name)
                    arguments["sources"][index] = directory/source.name
        function(**arguments)
    except Exception as e:
        if verbosity == "debug":
            raise
        else:
            parser.error(e)
    finally:
        shutil.rmtree(directory)

def list_(sources):
    
    for source in sources:
        print(source)
        # Look for 2dseq as it contains the pixel data
        infos = [
            (x, dicomifier.bruker_to_dicom.io.get_bruker_info(x.parent))
            for x in source.rglob("2dseq")]
        # Sort by series/reco, keep data sets missing this information at the 
        # end
        infos.sort(
            key=lambda x: (divmod(x[1].get("SeriesNumber", [1e30])[0], 2**16)))
        for path, info in infos:
            if "SeriesNumber" in info:
                subject = odil.as_unicode(
                    info.get("PatientName", [b"(no subject name)"])[0],
                    odil.Value.Strings(["ISO_IR 192"]))
                study_description = odil.as_unicode(
                    info.get("StudyDescription", [b"(no study description)"])[0],
                    odil.Value.Strings(["ISO_IR 192"]))
                series_number = divmod(info.get("SeriesNumber")[0], 2**16)
                series_description = odil.as_unicode(
                    info.get("SeriesDescription", [b"(no series description)"])[0],
                    odil.Value.Strings(["ISO_IR 192"]))
                print(
                    "  {}: {} / {} / {}:{} {}".format(
                        path.parent.relative_to(source), subject, 
                        study_description, series_number[0], series_number[1], 
                        series_description))
            else:
                print(
                    "  {}: unknown Bruker data".format(
                        path.parent.relative_to(source)))

def convert(sources, destination, transfer_syntax, layout, dicomdir, multiframe):
    
    if destination.is_dir() and list(destination.iterdir()):
        dicomifier.logger.warning("{} is not empty".format(destination))
    
    Writers = {
        "nested": dicomifier.bruker_to_dicom.io.NestedDICOMWriter,
        "flat": dicomifier.bruker_to_dicom.io.FlatDICOMWriter}
    writer = Writers[layout](destination, True, transfer_syntax)
    
    for source in sources:
        dicomifier.bruker_to_dicom.convert.convert_directory(
            source, destination, dicomdir, multiframe, writer)

if __name__ == "__main__": 
    sys.exit(main())
