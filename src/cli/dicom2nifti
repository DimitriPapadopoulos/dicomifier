#!/usr/bin/env python

import argparse
import glob
import logging
import json
import math
import os
import sys

import numpy
import odil

import dicomifier

def main():
    parser = argparse.ArgumentParser(description="Convert DICOM to NIfTI")
    parser.add_argument("dicom", nargs="+", help="DICOM file")
    parser.add_argument("destination", help="Output directory")
    parser.add_argument(
        "--dtype", "-d", default="single", type=lambda x: getattr(numpy, x), 
        help="Pixel type")
    parser.add_argument(
        "--zip", "-z", action="store_true", help="Compress NIfTI files")
    parser.add_argument(
        "--pretty-print", "-p", action="store_true", 
        help="Pretty-print JSON files")
    parser.add_argument(
        "--verbosity", "-v",
        choices=["warning", "info", "debug"], default="warning")
    
    arguments = vars(parser.parse_args())
    
    verbosity = arguments.pop("verbosity")
    logging.getLogger().setLevel(verbosity.upper())
    
    try:
        convert(**arguments)
    except Exception as e:
        if verbosity == "debug":
            raise
        else:
            parser.error(e)

def convert(dicom, destination, dtype, pretty_print, zip):
    if os.path.isdir(destination) and len(os.listdir(destination)) > 0:
        logging.warning("{} is not empty".format(destination))
    
    def binary_as_bytes(data):
        if "InlineBinary" in data:
            data["InlineBinary"] = data["InlineBinary"].encode("ascii")
        return data
    
    logging.info(
        "Reading {} DICOM file{}".format(
            len(dicom), "s" if len(dicom)>1 else ""))
    dicom_data_sets = [odil.read(x)[1] for x in dicom]
    dicom_data_sets = [
        json.loads(odil.as_json(x), object_hook=binary_as_bytes) 
        for x in dicom_data_sets]
    
    logging.info("Converting to NIfTI")
    nifti_data = dicomifier.dicom_to_nifti.convert(dicom_data_sets, dtype)
    
    stacks_count = {}
    for image, meta_data in nifti_data:
        series_instance_uid = meta_data["SeriesInstanceUID"][0]
        
        stacks_count.setdefault(series_instance_uid, 0)
        stacks_count[series_instance_uid] += 1
    
    directories = {}
    
    study_directories = {}
    series_directories = {}
    for image, meta_data in nifti_data:
        study_instance_uid = meta_data["StudyInstanceUID"][0]
        if study_instance_uid in study_directories:
            continue
        
        study_id = meta_data.get("StudyID", [None])[0]
        study_description = meta_data.get("StudyDescription", [None])[0]
        
        directory = []
        if study_id is not None:
            directory.append(study_id)
        else:
            directory.append(str(len(study_directories)))
        if study_description is not None:
            directory.append(study_description)
        directory = "_".join(directory)
        
        study_directories[study_instance_uid] = directory
        series_directories[study_instance_uid] = {}
    
    for image, meta_data in nifti_data:
        study_instance_uid = meta_data["StudyInstanceUID"][0]
        series_instance_uid = meta_data["SeriesInstanceUID"][0]
        if series_instance_uid in series_directories:
            continue
        series_number = meta_data.get("SeriesNumber", [None])[0]
        series_description = meta_data.get("SeriesDescription", [None])[0]
        
        directory = []
        if study_id is not None:
            directory.append(str(series_number))
        else:
            directory.append(str(len(series_directories[study_instance_uid])))
        if series_description is not None:
            directory.append(series_description)
        directory = "_".join(directory)
        
        series_directories[study_instance_uid][series_instance_uid] = directory
    
    for image, meta_data in nifti_data:
        study_instance_uid = meta_data["StudyInstanceUID"][0]
        series_instance_uid = meta_data["SeriesInstanceUID"][0]
        
        destination_directory = os.path.join(
            destination, 
            study_directories[study_instance_uid],
            series_directories[study_instance_uid][series_instance_uid])
        
        if not os.path.isdir(destination_directory):
            os.makedirs(destination_directory)
        
        index = 1+len(os.listdir(destination_directory))/2
        destination_root = os.path.join(destination_directory, str(index))
        
        suffix = ".nii"
        if zip:
            suffix += ".gz"
        image.save(destination_root+suffix)
        
        kwargs = {}
        if pretty_print:
            kwargs = {"sort_keys": True, "indent": 4}
        json.dump(
            meta_data, open(destination_root+".json", "w"), 
            cls=dicomifier.MetaData.JSONEncoder, **kwargs)

if __name__ == "__main__":
    sys.exit(main())
