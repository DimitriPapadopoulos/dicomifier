#!/usr/bin/env python

from __future__ import print_function
import argparse
import itertools
import json
import logging
import math
import os
import re
import sys

import odil

import dicomifier

def main():
    parser = argparse.ArgumentParser(
        description="Convert Bruker images to DICOM")
    subparsers = parser.add_subparsers(help="Sub-commands help")
    
    list_parser = subparsers.add_parser(
        "list", help="List series and reconstructions in a Bruker directory")
    list_parser.add_argument(
        "source", help="Directory containing the Bruker data")
    list_parser.add_argument(
        "--verbosity", "-v",
        choices=["warning", "info", "debug"], default="warning")
    list_parser.set_defaults(function=list_)
    
    convert_parser = subparsers.add_parser(
        "convert", help="Convert Bruker images")
    convert_parser.add_argument(
        "source", help="Directory containing the Bruker data")
    convert_parser.add_argument("destination", help="Output directory")
    convert_parser.add_argument(
        "--reconstruction", "-r", action="append",
        dest="series_and_reconstructions",
        help="Series and reconstruction to convert")
    convert_parser.add_argument(
        "--transfer-syntax", "-t", type=lambda x: getattr(odil.registry, x),
        default="ImplicitVRLittleEndian",
        help="Transfer syntax of the output files"
    )
    convert_parser.add_argument(
        "--dicomdir", "-d", action="store_true", help="Create a DICOMDIR")
    convert_parser.add_argument(
        "--verbosity", "-v",
        choices=["warning", "info", "debug"], default="warning")
    convert_parser.set_defaults(function=convert)
    
    arguments = vars(parser.parse_args())
    
    if "function" not in arguments:
        parser.error("too few arguments")
    
    verbosity = arguments.pop("verbosity")
    logging.getLogger().setLevel(verbosity.upper())
    
    function = arguments.pop("function")
    try:
        function(**arguments)
    except Exception as e:
        if verbosity == "debug":
            raise
        else:
            parser.error(e)

def list_(source):
    directory = dicomifier.bruker.Directory()
    directory.load(source)
    
    series_and_reconstructions = directory.get_series_and_reco(source)
    for series, reconstructions in sorted(series_and_reconstructions.items()):
        for reconstruction in sorted(reconstructions):
            bruker_binary = directory.get_dataset(
                "{}{:04d}".format(series, int(reconstruction)))
            bruker_json = json.loads(dicomifier.bruker.as_json(bruker_binary))
            print(
                "{}:{} - {} ({})".format(
                    series, reconstruction, 
                    bruker_json.get("VisuAcquisitionProtocol", ["(none)"])[0],
                    bruker_json.get("RECO_mode", ["none"])[0]
                )
            )

def convert(
        source, destination, series_and_reconstructions, transfer_syntax, 
        dicomdir):
    if os.path.isdir(destination) and len(os.listdir(destination)) > 0:
        logging.warning("{} is not empty".format(destination))
    
    if series_and_reconstructions is None:
        series_and_reconstructions = dicomifier.bruker.Directory.get_series_and_reco(source)
    else:
        parsed = {}
        for entry in series_and_reconstructions:
            series, reconstruction = entry.split(":")
            parsed.setdefault(series, []).append(reconstruction)
        series_and_reconstructions = parsed
    
    directories = {}
    files = []
    
    directory = dicomifier.bruker.Directory()
    directory.load(source)
    
    for series, reconstructions in sorted(series_and_reconstructions.items()):
        for reconstruction in sorted(reconstructions):
            logging.info("Converting {}:{}".format(series, reconstruction))
            
            bruker_binary = directory.get_dataset(
                "{}{:04d}".format(series, int(reconstruction)))
            bruker_json = json.loads(dicomifier.bruker.as_json(bruker_binary))
            logging.info("Found {}:{} - {} ({})".format(
                series, reconstruction, 
                bruker_json.get("VisuAcquisitionProtocol", ["(none)"])[0],
                bruker_json.get("RECO_mode", ["none"])[0]
            ))
            
            type_id = bruker_json.get("VisuSeriesTypeId", ["UNKNOWN"])[0]
            if not type_id.startswith("ACQ_"):
                logging.warning("Skipping {}:{} - {} ({}): type is {}".format(
                    series, reconstruction, 
                    bruker_json.get("VisuAcquisitionProtocol", ["(none)"])[0],
                    bruker_json.get("RECO_mode", ["none"])[0],
                    type_id
                ))
                continue
    
            try:
                dicom_jsons = dicomifier.bruker_to_dicom.mr_image_storage(
                    bruker_json, transfer_syntax)
            except Exception as e:
                logging.error(
                    "Could not convert {}:{} - {}".format(
                        series, reconstruction, e))
                logging.debug("Stack trace", exc_info=True)
                continue
    
            logging.info(
                "Writing {} dataset{}".format(
                    len(dicom_jsons), "s" if len(dicom_jsons)>1 else ""))
            for index, dicom_json in enumerate(dicom_jsons):
                dicom_binary = odil.from_json(json.dumps(dicom_json))
                
                image_file_width = 1+int(math.log10(len(dicom_jsons)))
                
                study_instance_uid = dicom_binary.as_string(odil.registry.StudyInstanceUID)[0]
                
                study_description = (
                    dicom_binary.as_string(odil.registry.StudyDescription)[0]
                    if dicom_binary.has(odil.registry.StudyDescription) 
                        and not dicom_binary.empty(odil.registry.StudyDescription)
                    else "")
                study_description = re.sub(
                    r"[^A-Z0-9_]", "_", study_description.upper())
                
                series_description = (
                    dicom_binary.as_string(odil.registry.SeriesDescription)[0]
                    if dicom_binary.has(odil.registry.SeriesDescription) 
                        and not dicom_binary.empty(odil.registry.SeriesDescription)
                    else "")
                series_description = re.sub(
                    r"[^A-Z0-9_]", "_", series_description.upper())
                    
                series_instance_uid = dicom_binary.as_string(odil.registry.SeriesInstanceUID)[0]
                
                study_directory, _ = directories.setdefault(
                    study_instance_uid, [1+len(directories), {}])
                series_directory = directories[study_instance_uid][1].setdefault(
                    series_instance_uid, 1+len(directories[study_instance_uid][1]))
                
                destination_file = os.path.join(
                    destination, 
                    "{}{}".format(
                        study_directory, 
                        "_{}".format(study_description) if study_description else "")[:8],
                    "{}{}".format(
                        series_directory, 
                        "_{}".format(series_description) if series_description else "")[:8],
                    ("{{:0{}d}}".format(image_file_width)).format(index)
                )
                if not os.path.isdir(os.path.dirname(destination_file)):
                    os.makedirs(os.path.dirname(destination_file))
                odil.write(
                    dicom_binary, destination_file, 
                    transfer_syntax=transfer_syntax)
                files.append(destination_file)
    
    if dicomdir and files:
        create_dicomdir(files, destination, [], [], [], [])

def create_dicomdir(
        names, directory, patient_key, study_key, series_key, image_key):
    files = []
    for name in names:
        if os.path.isfile(name):
            files.append(os.path.abspath(name))
        elif os.path.isdir(name):
            for dirpath, _, filenames in os.walk(name):
                dirpath = os.path.abspath(dirpath)
                files.extend(os.path.join(dirpath, x) for x in filenames)
    
    directory = os.path.abspath(directory)
    if not all(x.startswith(directory) for x in files):
        raise Exception("All files must be under {}".format(directory))
    
    files = [x[len(directory)+1:] for x in files]
    
    keys = {}
    for level in ["patient", "study", "series", "image"]:
        for entry in locals()["{}_key".format(level)]:
            if ":" in entry:
                tag, type_ = entry.split(":")
            else:
                tag, type_ = entry, "3"
            tag = getattr(odil.registry, tag)
            type_ = int(type_)
            keys.setdefault(level.upper(), []).append((tag, type_))
    
    creator = odil.BasicDirectoryCreator(directory, files, keys)
    creator()

if __name__ == "__main__": 
    sys.exit(main())
    
