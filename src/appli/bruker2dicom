#!/usr/bin/env python

from __future__ import print_function
import argparse
import itertools
import json
import logging
import math
import os
import re
import sys

import odil

import dicomifier

def main():
    parser = argparse.ArgumentParser(
        description="Convert Bruker images to DICOM")
    subparsers = parser.add_subparsers(help="Sub-commands help")
    
    list_parser = subparsers.add_parser(
        "list", help="List series and reconstructions in a Bruker directory")
    list_parser.add_argument(
        "source", help="Directory containing the Bruker data")
    list_parser.add_argument(
        "--verbosity", "-v",
        choices=["warning", "info", "debug"], default="warning")
    list_parser.set_defaults(function=list_)
    
    convert_parser = subparsers.add_parser(
        "convert", help="Convert Bruker images")
    convert_parser.add_argument(
        "source", help="Directory containing the Bruker data")
    convert_parser.add_argument("destination", help="Output directory")
    convert_parser.add_argument(
        "--reconstruction", "-r", action="append",
        dest="series_and_reconstructions",
        help="Series and reconstruction to convert")
    convert_parser.add_argument(
        "--transfer-syntax", "-t", type=lambda x: getattr(odil.registry, x),
        default="ImplicitVRLittleEndian",
        help="Transfer syntax of the output files"
    )
    convert_parser.add_argument(
        "--dicomdir", "-d", action="store_true", help="Create a DICOMDIR")
    convert_parser.add_argument(
        "--verbosity", "-v",
        choices=["warning", "info", "debug"], default="warning")
    convert_parser.set_defaults(function=convert)
    
    arguments = vars(parser.parse_args())
    
    if "function" not in arguments:
        parser.error("too few arguments")
    
    verbosity = arguments.pop("verbosity")
    logging.getLogger().setLevel(verbosity.upper())
    
    function = arguments.pop("function")
    try:
        function(**arguments)
    except Exception as e:
        if verbosity == "debug":
            raise
        else:
            parser.error(e)

def list_(source):
    directory = dicomifier.bruker.Directory()
    directory.load(source)
    
    series_and_reconstructions = directory.get_series_and_reco(source)
    for series, reconstructions in sorted(series_and_reconstructions.items()):
        for reconstruction in sorted(reconstructions):
            bruker_binary = directory.get_dataset(
                "{}{:04d}".format(series, int(reconstruction)))
            bruker_json = json.loads(dicomifier.bruker.as_json(bruker_binary))
            print(
                "{}:{} - {} ({})".format(
                    series, reconstruction, 
                    bruker_json.get("VisuAcquisitionProtocol", ["(none)"])[0],
                    bruker_json.get("RECO_mode", ["none"])[0]
                )
            )

def convert(
        source, destination, series_and_reconstructions, transfer_syntax, 
        dicomdir):
    if os.path.isdir(destination) and len(os.listdir(destination)) > 0:
        logging.warning("{} is not empty".format(destination))
    
    directory = dicomifier.bruker.Directory()
    directory.load(source)
    
    if series_and_reconstructions is None:
        everything = dicomifier.bruker.Directory.get_series_and_reco(source)
        series_and_reconstructions = {}
        for series, reconstructions in sorted(everything.items()):
            for reconstruction in sorted(reconstructions):
                bruker_binary = directory.get_dataset(
                    "{}{:04d}".format(series, int(reconstruction)))
                bruker_json = json.loads(dicomifier.bruker.as_json(bruker_binary))
                
                type_id = bruker_json.get("VisuSeriesTypeId", ["UNKNOWN"])[0]
                if not type_id.startswith("ACQ_"):
                    logging.warning("Skipping {}:{} - {} ({}): type is {}".format(
                        series, reconstruction, 
                        bruker_json.get("VisuAcquisitionProtocol", ["(none)"])[0],
                        bruker_json.get("RECO_mode", ["none"])[0],
                        type_id
                    ))
                    continue
                series_and_reconstructions.setdefault(series, []).append(reconstruction)
    else:
        parsed = {}
        for entry in series_and_reconstructions:
            series, reconstruction = entry.split(":")
            parsed.setdefault(series, []).append(reconstruction)
        series_and_reconstructions = parsed
    
    files = []
    
    for series, reconstructions in sorted(series_and_reconstructions.items()):
        for reconstruction in sorted(reconstructions):
            files.extend(dicomifier.bruker_to_dicom.convert_reconstruction(
                source, series, reconstruction, 
                dicomifier.bruker_to_dicom.mr_image_storage, transfer_syntax,
                destination, directory))
    
    if dicomdir and files:
        create_dicomdir(files, destination, [], [], [], [])

def create_dicomdir(
        names, directory, patient_key, study_key, series_key, image_key):
    files = []
    for name in names:
        if os.path.isfile(name):
            files.append(os.path.abspath(name))
        elif os.path.isdir(name):
            for dirpath, _, filenames in os.walk(name):
                dirpath = os.path.abspath(dirpath)
                files.extend(os.path.join(dirpath, x) for x in filenames)
    
    directory = os.path.abspath(directory)
    if not all(x.startswith(directory) for x in files):
        raise Exception("All files must be under {}".format(directory))
    
    files = [x[len(directory)+1:] for x in files]
    
    keys = {}
    for level in ["patient", "study", "series", "image"]:
        for entry in locals()["{}_key".format(level)]:
            if ":" in entry:
                tag, type_ = entry.split(":")
            else:
                tag, type_ = entry, "3"
            tag = getattr(odil.registry, tag)
            type_ = int(type_)
            keys.setdefault(level.upper(), []).append((tag, type_))
    
    creator = odil.BasicDirectoryCreator(directory, files, keys)
    creator()

if __name__ == "__main__": 
    sys.exit(main())
    
